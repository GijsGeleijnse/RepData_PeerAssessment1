demo()
?rnorm
rnorm
head(readlines(url("http://nu.nl","r")))
head(readLines(url("http://nu.nl","r")))
?pamr
head(rownames(available.packages(),100)
lkj
a <- available.packages()
head(rownames(a),10)
install.packages("KernSmooth")
library(KernSmooth)
library(swirl)
swirl()
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4,5,10)
)
submit()
submit()
remainder(5)
remainder(11,5)
remainder(divisor=11,num=5)
remainder(4, div = 2)
args(remainder)
submit()
submit()
evaluate(sd,c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]},c(8,4,0))
evaluate(function(x){x[length(x)]},c(8,4,0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram('frituren is heerlijk')
submit()
submit()
madlibs(place = "Geldrop", adjective - "angry", noun = "bark")
mad_libs(place = "Geldrop", adjective - "angry", noun = "bark")
mad_libs(place = "Geldrop", adjective = "angry", noun = "bark")
submit()
'I' %p% 'love' %p% 'R!'
data("iris")
library((datasets))
library(datasets)
data("iris")
data(iris
data(iris)
data(iris)
ls
?iris
rowMeans(iris)
apply(iris,1,mean)
Sepal.Length
iris$Sepal.Length
sapply(iris$Sepal.Length,mean)
apply(iris$Sepal.Length,mean)
?tapply
?vapply
lapply(iris$Sepal.Length,mean)
vapply(iris$Sepal.Length,mean)
tapply(iris$Sepal.Length,mean)
swirl()
library(swirl)
swirl()
sapply(flags,unique)
ok()
sapply(flags,class)
vapply(flags,class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate,flags$landmass, mean)
bye()
library(datasets)
data(iris)
table(iris)
tapply(iris$Sepal.Length,iris$Species,mean)
apply(iris[,[1,4]],mean)
rowMeans(iris[,1:4])
apply(iris,2,mean)
colMean(iris)
colMeans(iris)
apply(iris,1,mean)
apply(iris[,[1:4]],2,mean)
apply(iris,2,mean)
class(apply(iris,2,mean))
data(mtcars)
?mtcars
tapply(mtcars$cyl,mtcars$mpg,mean)
tapply(mtcars$mpg,mtcars$cyl,mean)
lapply(mtcars,mean)
mean(mtcars$mpg,mtcars$cyl)
sapply(slip(mtcars$mpg,mtcars$cyl),mean)
sapply(split(mtcars$mpg,mtcars$cyl),mean)
with(mtcars,tapply(mpg,cyl,mean))
tapply(mtcars$cyl,mtcars$mpg,mean)
tapply(mtcars$hp,mtcars$mpg,mean)
tapply(mtcars$mpg,mtcars$hp,mean)
tapply(mtcars$cyl,mtcars$hp,mean)
tapply(mtcars$hp,mtcars$cyl,mean)
t <- tapply(mtcars$hp,mtcars$cyl,mean)
t
t[1]
t[3] - t[1]
debug(ls)
ls
k
x
t
data(iris)
exit
q
ls
c
ls
c
apply(iris,2,mean)
f
f
Q
F
Q
Quit
?Browsew
?Browse
Q
source('C:/Users/nlv11287/Desktop/Coursera/DataScience/R/pollutant.R')
l
nu
row
l
ls
colMean
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
0
exit()
q()
packages.install("RMySQL")
install.packages("RMySQL")
library("RMySQL")
library("RMySQL")
installed.packages()
db <- dbConnect(MySQL(), user="genome", host="genome-mysql.ucsc.edu")
db <- dbConnect(MySQL(), user="genome", host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb,"show databases;"); dbDisconnect(db)
result <- dbGetQuery(db,"show databases;"); dbDisconnect(db)
result
library(swirl)
swirl(swirl())
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_b
?group_by
by_package <- group_by(cran,package)
by_package
summary(by_package,mean(size))
summarize(by_package,mean(size))
?n
submit()
pack_sum(tbl)
source('C:/Users/nlv11287/AppData/Local/Temp/Rtmp4i5tIj/summarize1.R')
pack_sum(tbl())
pack_sum(tbl)
source('C:/Users/nlv11287/AppData/Local/Temp/Rtmp4i5tIj/summarize1.R')
pack_sum
quantile(pack_sum$count,probs=0.99)
filter(pack_sum,count>679)
top_counts <- filter(pack_sum,count>679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts,desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique,probs=0.99)
top_unique <- filter(pack_sum, unique>465)
View()
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique()))
top_unique_sorted <- arrange(top_unique, desc(unique())
)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
submit()
exit()
q()
swirl()
library(swirl)
swirl()
dist(dataFrame)
hc <- hclust(distxy)
plot(hc)
plot(as.dendrogram(hc))
abline(h=1.5,col="blue")
abline(h=0.4,col="red")
5
12
abline(h=0.05,col="green")
dist(dFsm)
hc
heatmap(dataMatrix,col=cm.colors(25))
heatmap(mt)
mt
plot(denmt)
distmt
cmt
cmat
points(cx,cy,col=c("red","orange","purple"),pch=3,cex=2,lwd=2)
mdist(x,y,cx,xy)
mdist(x,y,cx,cy)
apply(distTmp,2,which.min)
points(x,y,pch=19,cex=2,col=cols1[newClust])
tapply(x,newClust,mean)
tapply(y,newClust,mean)
points(newCx,newCy,col=cols1,pch=8,cex=2,lwd=2)
mdist(x,y,newCx,newCy)
apply(distTmp2,2,which.min)
points(x,y,pch=19,cex=2,col=cols1[newClust2])
tapply(x,newClust2,mean)
tapply(y,newClust2,mean)
points(finalCx,finalCy,col=cols1,pch=9,cex=2,lwd=2)
kmeans(dataFrame,centers=3)
kmObj$iter
plot(x,y,col=kmObj$cluster,pch,cex)
plot(x,y,col=kmObj$cluster,pch=19,cex=2)
points(kmObj$centers,col=c("black,red","green"),pch=3,cex=3,lwd=3)
points(kmObj$centers,col=c("black","red","green"),pch=3,cex=3,lwd=3)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
head(dataMatrix)
heatmap(dataMatrix)
myedit("addPatt.R")
source("addPatt.R",local=TRUE)
heatmap(dataMatrix)
mat
svd(mat)
matu %*% diag %*% t(matv)
svd(scale(mat))
prcomp(scale(mat))
svd1$v[,1]
svd1$d
head(constantMatrix)
svd2$d
svd2$v[,1:2]
svd2$d
dim(faceData)
a1 <- (svd1$u %*% svd1$d) %*% svd1$v
a1 <- (svd1$u[,1] %*% svd1$d[1]) %*% svd1$v
a1 <- (svd1$u[,1] %*% svd1$d[1]) %*% svd1$v[1,]
a1 <- (svd1$u[,1] %*% svd1$d[1])
a1 <- (svd1$u[,1])
a1 <- (svd1$u[,1] * svd1$d[1]) %*% t(svd1$v[,1])
myImage(a1)
a2 <- (svd1$u[,1:2] * svd1$d[1:2]) %*% t(svd1$v[,1]:2)
a2 <- (svd1$u[,1:2] * svd1$d[1:2]) %*% t(svd1$v[,1:2])
a2 <- svd1$u[,1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[,1:2])
myImage(a2)
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5]))
myImage(svd1$u[,1:10] %*% diag(svd1$d[1:10]) %*% t(svd1$v[,1:10]))
0
tapply(flags$population, flags$red, summary)
tapply(flags$landmass, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
dim(ssd)
names(ssd[,562:563])
table(ssd$subject)
sum(table(ssd$subject))
table(ssd$activity)
sub1 <- subset(ssd,subject==1)
sim(sub1)
dim(sub1)
names(sub1[,1:12])
myedit("showXY.R")
showMe(1:6)
mdist <- dist(sub[,1:3])
mdist <- dist(sub)
mdist <- dist(sub,[,1:3])
mdist <- dist(sub[,1:3])
m
mist
mist <- NULL
mdist <- dist(sub1[,1:3])
hclustering <- hclust(mdist)
myplclust(hclustering,lab.col=unclass(sub1$activity))
mdist <- dist(sub1[,10:12])
hclustering <- hclust(mdist)
myplclust(hclustering,lab.col=unclass(sub1$activity))
svd1 <- svd(scale(sub1[,-c(562,563)]))
dim(dsv1$u)
dim(svd1$u)
maxCon <- which.max(svd1$v[,2])
mdist <- dist(sub1[,c(10:12,maxCon)])
hclustering <- hclust(mdist)
myplclust(hclustering,lab.col=unclass(sub1$activity))
sub1[maxCon]
names(sub1[maxCon])
kClust <- kmeans(sub1[,-c(-1,-2)],6)
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6)
table(kClust$cluster,sub1$activity)
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6,nstart=100)
table(kClust$cluster,sub1$activity)
sim(kClust$centers)
dim(kClust$centers)
laying<- which(kClust$size==29)
plot(kClust$centers[laying,1:12],pch=19,ylab="Laying Cluster")
names(sub1[,1:3])
walkdown <- which(kClust$size==49)
plot(kClust$centers[wakldown,1:12],pch=19,ylab="Walkdown Cluster")
plot(kClust$centers[walkdown,1:12],pch=19,ylab="Walkdown Cluster")
q()
library(swirl)
swirl()
dim(pm0)
head(pm0)
cnames
cnames <- strsplit(cnames,"|", fixed=TRUE)
cnames
names(pm0) <- make.names(cnames[[1]][wcol])
head(pm0)
x0 <- pm0$Sample.Value
str(x0)
is.na(x0)
mean(is.na(x0))
names(pm1) <- make.names(cnames[[1]][wcol])
dim(pm1)
x1 <- pm1$Sample.Value
mean(is.na(x1))
summary(x0)
summary(x1)
boxplot(x1,x2)
boxplot(x0,x1)
boxplot(log10(x0),log10(x1))
negative <- x1<0
sum(negative,na.rm=TRUE)
mean(negative,na.rm=TRUE)
dates <- pm1$Date
str(dates)
dates <- as.Date(as.character(date),"%Y%m%d")
dates <- as.Date(as.character(dates),"%Y%m%d")
head(dates)
hist(dates[negative], "month")
str(site0)
both <- intersect(site0,site1)
both
head(pm0)
cnt0 <- subset(pm0,State.Code==36)
cnt0 <- subset(pm0, State.Code == 36 & county.site %in% both)
cnt1 <- subset(pm1, State.Code == 36 & county.site %in% both)
sapply(split(cnt0,cnt0$county.site),nrow)
sapply(split(cnt1,cnt1$county.site),nrow)
pm0sub <- subset(cnt0,Country.Code==63 & Site.ID==2008)
pm0sub <- subset(cnt0,County.Code==63 & Site.ID==2008)
pm1sub <- subset(cnt1,County.Code==63 & Site.ID==2008)
x0sub <- pm0sub$Sample.Value
x1sub <- pm1sub$Sample.Value
dates0 <- as.Date(as.character(pm0sub$Date),"%Y%m%d")
dates1 <- as.Date(as.character(pm1sub$Date),"%Y%m%d")
par(mfrow=c(1,2),mar=c(4,4,2,1))
plot(dates0,x0sub,pch=20)
abline(lwd=2,median(x0sub),na.rm=TRUE)
abline(lwd=2,median(x0sub,na.rm=TRUE))
abline(median(x0sub,na.rm=TRUE))
abline(median(x0sub))
abline()
bline(h = median(x0sub, na.rm = TRUE),lwd=2)
abline(h = median(x0sub, na.rm = TRUE),lwd=2)
plot(dates1,x1sub,pch=20)
abline(h = median(x1sub, na.rm = TRUE),lwd=2)
range(x0sub,x1sub,na.rm=TRUE)
rng <- range(x0sub,x1sub,na.rm=TRUE)
rng
mn0 <- with(pm0,tapply(Sample.Value,State.Code,mean,na.rm=TRUE))
str(mn0)
mn1 <- with(pm1,tapply(Sample.Value,State.Code,mean,na.rm=TRUE))
str(mn1)
summary(mn0)
summary(mn1)
d0 <- data.fame(state=names(mn0),mean=mn0)
d0 <- data.frame(state=names(mn0),mean=mn0)
d1 <- data.frame(state=names(mn1),mean=mn1)
mrg <- merg(d0,d1,by="state")
mrg <- merge(d0,d1,by="state")
dim(mrg)
head(mrg)
with(mrg,plot(rep(1,52),mrg[,2],xlim=c(.5,2.5)))
with(mrg,plot(rep(2,52),mrg[,3])
)
with(mrg, points(rep(2, 52), mrg[, 3]))
segment(rep(1,50),rep(2,50),mrg[,2],mrg[,3])
segments(rep(1,50),rep(2,50),mrg[,2],mrg[,3])
segments(rep(1, 52), mrg[, 2], rep(2, 52), mrg[, 3])
mrg[mrg$mean.2 < mrg$mean.3, ]
mrg[mrg$mean.x < mrg$mean.y,]
exit
q()
knitr::opts_chunk$set(echo = TRUE)
1 +1
library(knitr)
setwd("~/GitHub/RepData_PeerAssessment1")
source('~/GitHub/RepData_PeerAssessment1/spielerei.R')
act <- read.csv("activity.csv")
View(act)
str(act)
act <- mutate(act,date=ymd(date))
run_libs()
library(dplyr)
run_libs()
act <- mutate(act,date=ymd(date))
library(lubridate)
act <- mutate(act,date=ymd(date))
str(act)
source('~/GitHub/RepData_PeerAssessment1/spielerei.R')
source('~/GitHub/RepData_PeerAssessment1/spielerei.R')
source('~/GitHub/RepData_PeerAssessment1/spielerei.R')
spd()
source('~/GitHub/RepData_PeerAssessment1/spielerei.R')
source('~/GitHub/RepData_PeerAssessment1/spielerei.R')
source('~/GitHub/RepData_PeerAssessment1/spielerei.R')
spd()
?hist
source('~/GitHub/RepData_PeerAssessment1/spielerei.R')
source('~/GitHub/RepData_PeerAssessment1/spielerei.R')
?hist
source('~/GitHub/RepData_PeerAssessment1/spielerei.R')
spd()
source('~/GitHub/RepData_PeerAssessment1/spielerei.R')
source('~/GitHub/RepData_PeerAssessment1/spielerei.R')
spd()
source('~/GitHub/RepData_PeerAssessment1/spielerei.R')
spd()
source('~/GitHub/RepData_PeerAssessment1/spielerei.R')
spd()
source('~/GitHub/RepData_PeerAssessment1/spielerei.R')
spd()
?vapply
source('~/GitHub/RepData_PeerAssessment1/spielerei.R')
?vapply
spd()
?vapply
source('~/GitHub/RepData_PeerAssessment1/spielerei.R')
?vapply
spd()
source('~/GitHub/RepData_PeerAssessment1/spielerei.R')
spd()
source('~/GitHub/RepData_PeerAssessment1/spielerei.R')
spd()
source('~/GitHub/RepData_PeerAssessment1/spielerei.R')
spd()
source('~/GitHub/RepData_PeerAssessment1/spielerei.R')
spd()
source('~/GitHub/RepData_PeerAssessment1/spielerei.R')
spd()
source('~/GitHub/RepData_PeerAssessment1/spielerei.R')
spd()
source('~/GitHub/RepData_PeerAssessment1/spielerei.R')
spd()
source('~/GitHub/RepData_PeerAssessment1/spielerei.R')
spd()
source('~/GitHub/RepData_PeerAssessment1/spielerei.R')
spd()
source('~/GitHub/RepData_PeerAssessment1/spielerei.R')
spd()
source('~/GitHub/RepData_PeerAssessment1/spielerei.R')
spd()
source('~/GitHub/RepData_PeerAssessment1/spielerei.R')
spd()
source('~/GitHub/RepData_PeerAssessment1/spielerei.R')
spd()
source('~/GitHub/RepData_PeerAssessment1/spielerei.R')
spd()
source('~/GitHub/RepData_PeerAssessment1/spielerei.R')
spd()
source('~/GitHub/RepData_PeerAssessment1/spielerei.R')
source('~/GitHub/RepData_PeerAssessment1/spielerei.R')
source('~/GitHub/RepData_PeerAssessment1/spielerei.R')
spd()
